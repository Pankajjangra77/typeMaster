{"version":3,"sources":["components/Data.js","hooks/useKeyPress.js","utils/words.js","PopUpResult.js","App.js","reportWebVitals.js","index.js"],"names":["Data","name","data","className","useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","generate","count","Array","fill","map","_","faker","random","word","join","PopUpResult","wpm","cpm","accuracy","show","setShow","handleClose","location","reload","Modal","onHide","backdrop","keyboard","aria-labelledby","centered","Header","Title","Body","Footer","Button","variant","onClick","initialWords","App","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","timer","setTimer","setWpm","setCpm","setAccuracy","lastScore","setLastScore","totalKeyStrokes","setTotalKeyStrokes","wordCounter","setWordCounter","countDownStarted","setCountDownStarted","resultedText","setResultedText","showPopUp","setShowPopUp","interval","useRef","updatedOutgoingChars","updatedIncomingChars","substring","split","updatedTotalKeyStrokes","toFixed","current","setInterval","prevTime","clearInterval","console","log","localStorage","setItem","JSON","stringify","wpmValue","getItem","params","particles","number","value","density","enable","value_area","shape","type","stroke","width","color","opacity","slice","id","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.262e8295.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Data({name, data}) {\r\n    return (\r\n        <>\r\n            <div className=\"data_items\">\r\n                <p className=\"data_name\">{name}</p>\r\n                <h2 className=\"data_content\">{data}</h2>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Data\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst useKeyPress = callback => {\r\n\r\n  const [keyPressed, setKeyPressed] = useState();\r\n\r\n  useEffect(() => {\r\n\r\n    const downHandler = ({ key }) => {\r\n      if (keyPressed !== key && key.length === 1) {\r\n        setKeyPressed(key);\r\n        callback && callback(key);\r\n      }\r\n    };\r\n\r\n    const upHandler = () => {\r\n      setKeyPressed(null);\r\n    };\r\n\r\n    window.addEventListener('keydown', downHandler);\r\n    window.addEventListener('keyup', upHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', downHandler);\r\n      window.removeEventListener('keyup', upHandler);\r\n    };\r\n  });\r\n  return keyPressed;\r\n};\r\n\r\nexport default useKeyPress;","import faker from 'faker';\r\n\r\nexport const generate = (count = 15) => {\r\n  return new Array(count)\r\n    .fill()\r\n    .map(_ => faker.random.word())\r\n    .join(' ');\r\n};","import React, { useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction PopUpResult({wpm, cpm, accuracy}) {\r\n\r\n    const [show, setShow] = useState(true);\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        window.location.reload();\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} backdrop=\"static\"\r\n                keyboard={false}\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                centered>\r\n                <Modal.Header >\r\n                    <Modal.Title>Your Results!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                            <b>WPM:</b> {wpm} \r\n                            <br></br>\r\n                            <b>CPM:</b> {cpm}\r\n                            <br></br>\r\n                            <b>ACCURACY:</b> {accuracy}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Restart\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PopUpResult;\r\n","import './App.css';\nimport Data from './components/Data';\nimport { useEffect, useRef, useState } from 'react';\nimport useKeyPress from './hooks/useKeyPress';\nimport { generate } from './utils/words';\nimport PopUpResult from \"./PopUpResult\";\nimport Particles from 'react-particles-js';\n\nconst initialWords = generate();\n\n// let countDownStarted = false;\n\nfunction App() {\n\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(50).fill(' ').join(''),\n  );\n  const [outgoingChars, setOutgoingChars] = useState('');\n  const [currentChar, setCurrentChar] = useState(initialWords.charAt(0));\n  const [incomingChars, setIncomingChars] = useState(initialWords.substr(1));\n\n  const [timer, setTimer] = useState(60);\n  const [wpm, setWpm] = useState(0);\n  const [cpm, setCpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [lastScore, setLastScore] = useState(0);\n  const [totalKeyStrokes, setTotalKeyStrokes] = useState('');\n  const [wordCounter, setWordCounter] = useState(0);\n  \n  const [countDownStarted, setCountDownStarted] = useState(false);\n  const [resultedText, setResultedText] = useState('');\n  const [showPopUp, setShowPopUp] = useState(false);\n\n  // const [incorrect ,setIncorrect] = useState(false);\n\n  const interval = useRef();\n\n  useKeyPress(key => {\n\n    let updatedOutgoingChars = outgoingChars;\n    let updatedIncomingChars = incomingChars;\n\n    // countDownStarted = true;\n    setCountDownStarted(true);\n\n    if(timer === 0)\n    {\n      return;\n    }\n    \n    if(key === currentChar )\n    {\n      \n\n        if (leftPadding.length > 0) {\n            setLeftPadding(leftPadding.substring(1));\n        }\n\n        updatedOutgoingChars += currentChar;\n        setOutgoingChars(updatedOutgoingChars);\n\n        setCurrentChar(incomingChars.charAt(0));\n\n        updatedIncomingChars = incomingChars.substring(1)\n        if(updatedIncomingChars.split(' ').length < 10){\n            updatedIncomingChars += \" \" + generate();\n        }\n\n        setIncomingChars(updatedIncomingChars);\n\n        //wpm logic\n        if (incomingChars.charAt(0) === ' '){\n          setWordCounter(wordCounter + 1);\n        }\n        setWpm(wordCounter);\n\n        //cpm logic\n        setCpm(outgoingChars.length + 1);\n\n      }\n      //accuracy\n      const updatedTotalKeyStrokes = totalKeyStrokes + key;\n      setTotalKeyStrokes(updatedTotalKeyStrokes);\n\n      setAccuracy(((updatedOutgoingChars.length*100)/updatedTotalKeyStrokes.length).toFixed(2,));\n\n\n      // if(key !== currentChar){\n      //   setIncorrect(true);\n      //   key.style.color = \"red\";\n      // }else{\n      //   setIncorrect(false);\n      // }\n      setResultedText(totalKeyStrokes + key);\n  });\n\n  useEffect(() => {\n    if(countDownStarted){\n      interval.current = setInterval(() => {\n        setTimer(prevTime => prevTime - 1)\n      }, 1000)\n      return () => clearInterval(interval.current);       \n    }                       \n  }, [countDownStarted]);\n\n  useEffect(()=>{\n    if(timer===0){\n      console.log(\"timer stopped\");\n      clearInterval(interval.current);\n\n      localStorage.setItem(\"lastScore\", JSON.stringify(wpm));\n            \n      setShowPopUp(true);\n    }\n  },[timer,wpm]);\n\n  useEffect(() => {\n    const wpmValue = localStorage.getItem(\"lastScore\");\n    setLastScore(wpmValue);\n\t}, [])\n\n\n  return (\n    <>\n    <Particles \n      params={{\n          particles:{\n            number:{\n              value: 103,\n              density:{\n                enable: true,\n                value_area: 900\n              }\n            },\n            shape:{\n              type:\"circle\",\n              stroke:{\n                width:10,\n                color:\"rgb(65, 235, 226)\"\n              }\n            },\n            opacity:{\n              value: 1,\n              random:false\n            }\n            \n            // line_linked:{\n            //   shadow:{\n            //     enable:true,\n            //     // color: \"#3CA9D1\",\n            //     blur: 2\n            //   }\n            // }\n          }\n       }} \n\n    />\n\n\n    <div className=\"all_container\">\n    <div className=\"container\">\n      <h1 className=\"top_heading\">Check Your Typing Speed 🚀</h1>\n      <p className=\"home_text\">Press any key to start the game.</p>\n      <div className=\"data_components\">\n        <Data name=\"TIMER\" data={timer} />\n        <Data name=\"WMP\" data= {wpm} />\n        <Data name=\"CPM\" data={cpm} />\n        <Data name=\"ACCURACY\" data={accuracy} />\n        <Data name=\"LAST SCORE\" data={lastScore} />\n      </div>\n\n      <div className=\"typing_area\">\n            <div className=\"typed_chars\">{(leftPadding + outgoingChars).slice(-50)}</div>\n                <div className=\"current_char blink_me\">{currentChar}</div>\n            <div className=\"typing_chars\">{incomingChars.substr(0, 50)}</div>\n            </div>\n\n            <div className=\"resulted-area\">\n                  <div className=\"resulted-text\" >{resultedText}</div>\n            </div>\n\n    {showPopUp && <PopUpResult wpm={wpm} cpm={cpm} accuracy={accuracy} />}\n    </div>\n      <div id=\"footer\">Made With <span className=\"fa\"> ❤ </span> By <a href=\"https://github.com/Pankajjangra77\">Pankaj Jangra</a></div>\n    </div>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}